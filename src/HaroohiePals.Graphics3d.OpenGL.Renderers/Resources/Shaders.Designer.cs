//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HaroohiePals.Graphics3d.OpenGL.Renderers.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Shaders {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Shaders() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("HaroohiePals.Graphics3d.OpenGL.Renderers.Resources.Shaders", typeof(Shaders).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///layout (location = 1) out uvec4 outPickingId;
        ///layout (location = 2) out uint outFogBit;
        ///
        ///in vec4 vertexColor; // the input variable from the vertex shader (same name and same type)
        ///flat in uint pickingId;
        ///sample in vec3 boxPos;
        ///
        ///flat in uint hover;
        ///flat in uint highlight;
        ///
        ///uniform sampler2D texture0;
        ///
        ///sample in vec2 texCoord;
        ///
        ///const float lineWidth = 1.25;
        ///
        ///vec3 pointOnLine(vec3 start, vec3 end, vec3 p)
        ///{
        ///    vec3 lVec = end - [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BoxFragment {
            get {
                return ResourceManager.GetString("BoxFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///layout (location = 1) out uvec4 outPickingId;
        ///layout (location = 2) out uint outFogBit;
        ///
        ///in vec4 vertexColor; // the input variable from the vertex shader (same name and same type)
        ///flat in uint pickingId;
        ///sample in vec3 boxPos;
        ///
        ///flat in uint hover;
        ///flat in uint highlight;
        ///
        ///uniform sampler2D texture0;
        ///
        ///sample in vec2 texCoord;
        ///
        ///const float lineWidth = 1.25;
        ///
        ///vec3 pointOnLine(vec3 start, vec3 end, vec3 p)
        ///{
        ///    vec3 lVec = end - [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BoxIntelFragment {
            get {
                return ResourceManager.GetString("BoxIntelFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) in vec3 aPosition;
        ///layout (location = 1) in vec3 aNormalOrColor;
        ///layout (location = 2) in vec2 aTexCoord;
        ///layout (location = 3) in uint aMtxId;
        ///
        ///layout (location = 4) in mat4 aTransform;
        ///layout (location = 8) in vec3 aColor;
        ///layout (location = 9) in uint aPickingId;
        ///layout (location = 10) in uint aHasText;
        ///layout (location = 11) in uint aHover;
        ///layout (location = 12) in uint aHighlight;
        ///layout (location = 13) in float aTexCoordAngle;
        ///
        ///out vec4 vertexCo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BoxVertex {
            get {
                return ResourceManager.GetString("BoxVertex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///layout (location = 1) out uvec4 outPickingId;
        ///layout (location = 2) out uint outFogBit;
        ///
        ///in vec4 vertexColor; // the input variable from the vertex shader (same name and same type)
        ///flat in uint pickingId;
        ///sample in vec3 boxPos;
        ///
        ///flat in uint hover;
        ///flat in uint highlight;
        ///
        ///uniform sampler2D texture0;
        ///
        ///sample in vec2 texCoord;
        ///
        ///void main()
        ///{
        ///    vec2 circCoord = 2.0 * texCoord - 1.0;
        ///    
        ///    float d = dot(circCoord, circCoord) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CircleFragment {
            get {
                return ResourceManager.GetString("CircleFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) in vec3 aPosition;
        ///layout (location = 1) in vec3 aNormalOrColor;
        ///layout (location = 2) in vec2 aTexCoord;
        ///layout (location = 3) in uint aMtxId;
        ///
        ///layout (location = 4) in mat4 aTransform;
        ///layout (location = 8) in vec3 aColor;
        ///layout (location = 9) in uint aPickingId;
        ///layout (location = 10) in uint aHasText;
        ///layout (location = 11) in uint aHover;
        ///layout (location = 12) in uint aHighlight;
        ///layout (location = 13) in float aTexCoordAngle;
        ///
        ///out vec4 vertexCo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CircleVertex {
            get {
                return ResourceManager.GetString("CircleVertex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///layout (location = 1) out uvec4 outPickingId;
        ///layout (location = 2) out uint outFogBit;
        ///
        ///in vec4 vertexColor; // the input variable from the vertex shader (same name and same type)
        ///flat in uint pickingId;
        ///sample in vec3 boxPos;
        ///
        ///flat in uint hover;
        ///flat in uint highlight;
        ///flat in uint hasTexture;
        ///flat in float texCoordAngle;
        ///
        ///uniform sampler2D texture0;
        ///
        ///vec2 rotateUV(vec2 uv, float rotation)
        ///{
        ///    float mid = 0.5;
        ///    return v [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DotFragment {
            get {
                return ResourceManager.GetString("DotFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) in vec3 aPosition;
        ///layout (location = 1) in vec3 aNormalOrColor;
        ///layout (location = 2) in vec2 aTexCoord;
        ///layout (location = 3) in uint aMtxId;
        ///
        ///layout (location = 4) in mat4 aTransform;
        ///layout (location = 8) in vec3 aColor;
        ///layout (location = 9) in uint aPickingId;
        ///layout (location = 10) in uint aHasText;
        ///layout (location = 11) in uint aHover;
        ///layout (location = 12) in uint aHighlight;
        ///layout (location = 13) in float aTexCoordAngle;
        ///
        ///out vec4 vertexCo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DotVertex {
            get {
                return ResourceManager.GetString("DotVertex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///in float near;
        ///in float far;
        ///in float scale;
        ///in vec3 nearPoint;
        ///in vec3 farPoint;
        ///in mat4 fragView;
        ///in mat4 fragProj;
        ///
        ///vec4 grid(vec3 fragPos3D, float scale) {
        ///    vec2 coord = fragPos3D.xz * scale;
        ///    vec2 derivative = fwidth(coord) * 1.5;
        ///    vec2 grid = abs(fract(coord - 0.5) - 0.5) / derivative;
        ///    float line = min(grid.x, grid.y);
        ///    float minimumz = min(derivative.y, 1);
        ///    float minimumx = min(derivative.x, 1);
        ///    v [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GridFragment {
            get {
                return ResourceManager.GetString("GridFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) in vec3 aPosition;
        ///layout (location = 1) in vec3 aNormalOrColor;
        ///layout (location = 2) in vec2 aTexCoord;
        ///layout (location = 3) in uint aMtxId;
        ///
        ///out float near;
        ///out float far;
        ///out float scale;
        ///out vec3 nearPoint;
        ///out vec3 farPoint;
        ///out mat4 fragView;
        ///out mat4 fragProj;
        ///
        ///uniform mat4 model;
        ///uniform mat4 view;
        ///uniform mat4 projection;
        ///uniform float gridScale;
        ///uniform float gridFar;
        ///uniform float gridNear;
        ///
        ///vec3 UnprojectPoint(float x, float y, flo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GridVertex {
            get {
                return ResourceManager.GetString("GridVertex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) out vec4 fragColor;
        ///layout (location = 1) out uvec4 outPickingId;
        ///layout (location = 2) out uint outFogBit;
        ///
        ///uniform uint uPickingId;
        ///uniform vec4 uColor;
        ///
        ///void main()
        ///{
        ///    fragColor = uColor;
        ///
        ///    outPickingId.r = uPickingId &amp; 0xFFu;
        ///    outPickingId.g = (uPickingId &gt;&gt; 8) &amp; 0xFFu;
        ///    outPickingId.b = (uPickingId &gt;&gt; 16) &amp; 0xFFu;
        ///    outPickingId.a = (uPickingId &gt;&gt; 24) &amp; 0xFFu;
        ///
        ///    outFogBit = 0;
        ///}
        ///.
        /// </summary>
        internal static string LineFragment {
            get {
                return ResourceManager.GetString("LineFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        /////https://stackoverflow.com/a/60440937
        ///
        ///layout(std140) uniform TVertex
        ///{
        ///   vec4 vertex[1024]; 
        ///};
        ///
        ///uniform mat4  u_mvp;
        ///uniform vec2  u_resolution;
        ///uniform float u_thickness;
        ///
        ///void main()
        ///{
        ///    int line_i = gl_VertexID / 6;
        ///    int tri_i  = gl_VertexID % 6;
        ///
        ///    vec4 va[4];
        ///    for (int i=0; i&lt;4; ++i)
        ///    {
        ///        va[i] = u_mvp * vertex[line_i+i];
        ///        va[i].xy /= va[i].w;
        ///        va[i].xy = (va[i].xy + 1.0) * 0.5 * u_resolution;
        ///    }
        ///
        ///    vec2 v_line = va[2] [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LineVertex {
            get {
                return ResourceManager.GetString("LineVertex", resourceCulture);
            }
        }
    }
}
