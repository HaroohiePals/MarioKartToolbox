//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HaroohiePals.MarioKartToolbox.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Shaders {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Shaders() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("HaroohiePals.MarioKartToolbox.Resources.Shaders", typeof(Shaders).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///uniform sampler2DMS depthBufferTex;
        ///uniform usampler2DMS fogBufferTex;
        ///uniform vec2 viewportSize;
        ///uniform mat4 invProjMtx;
        ///uniform mat4 invViewMtx;
        ///uniform mat4 mkdsProjMtx;
        ///uniform int fogShift;
        ///uniform int fogOffset;
        ///uniform int fogTable[32];
        ///uniform vec4 fogColor;
        ///
        ///in vec2 texCoord;
        ///
        ///out vec4 outputColor;
        ///
        ///void main()
        ///{
        ///    ivec2 intTexCoord = ivec2(int(viewportSize.x * texCoord.x), int(viewportSize.y * texCoord.y));
        ///
        ///    vec4 samp = texelFetch(depthBufferTex, intT [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FogPassFragment {
            get {
                return ResourceManager.GetString("FogPassFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///uniform mat4 projMtxScreenQuad;
        ///uniform vec2 viewportSize;
        ///
        ///layout(location = 0) in vec2 aPos;
        ///
        ///out vec2 texCoord;
        ///
        ///void main()
        ///{
        ///    gl_Position = projMtxScreenQuad * vec4(aPos * viewportSize, 0, 1);
        ///    texCoord = vec2(aPos.x, 1.0 - aPos.y);
        ///}.
        /// </summary>
        internal static string FogPassVertex {
            get {
                return ResourceManager.GetString("FogPassVertex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///layout (location = 1) out uvec4 outPickingId;
        ///layout (location = 2) out uint outFogBit;
        ///
        ///in vec4 vertexColor; // the input variable from the vertex shader (same name and same type)
        ///flat in uint pickingId;
        ///sample in vec3 boxPos;
        ///
        ///flat in uint hover;
        ///flat in uint highlight;
        ///
        ///uniform sampler2D texture0;
        ///
        ///sample in vec2 texCoord;
        ///
        ///const float lineWidth = 1.25;
        ///
        ///vec3 pointOnLine(vec3 start, vec3 end, vec3 p)
        ///{
        ///    vec3 lVec = end - [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string KartFragment {
            get {
                return ResourceManager.GetString("KartFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///layout (location = 1) out uvec4 outPickingId;
        ///layout (location = 2) out uint outFogBit;
        ///
        ///in vec4 vertexColor; // the input variable from the vertex shader (same name and same type)
        ///flat in uint pickingId;
        ///sample in vec3 boxPos;
        ///
        ///flat in uint hover;
        ///flat in uint highlight;
        ///
        ///uniform sampler2D texture0;
        ///
        ///sample in vec2 texCoord;
        ///
        ///const float lineWidth = 1.25;
        ///
        ///vec3 pointOnLine(vec3 start, vec3 end, vec3 p)
        ///{
        ///    vec3 lVec = end - [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string KartIntelFragment {
            get {
                return ResourceManager.GetString("KartIntelFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) in vec3 aPosition;
        ///layout (location = 1) in vec3 aNormalOrColor;
        ///layout (location = 2) in vec2 aTexCoord;
        ///layout (location = 3) in uint aMtxId;
        ///
        ///layout (location = 4) in mat4 aTransform;
        ///layout (location = 8) in vec3 aColor;
        ///layout (location = 9) in uint aPickingId;
        ///layout (location = 10) in uint aHasText;
        ///layout (location = 11) in uint aHover;
        ///layout (location = 12) in uint aHighlight;
        ///layout (location = 13) in float aTexCoordAngle;
        ///
        ///out vec4 vertexCo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string KartVertex {
            get {
                return ResourceManager.GetString("KartVertex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///layout (location = 1) out uvec4 outPickingId;
        ///
        ///in vec4 vertexColor;
        ///flat in uint pickingId;
        ///
        ///void main()
        ///{
        ///    FragColor = vertexColor;
        ///
        ///    outPickingId.r = pickingId &amp; 0xFFu;
        ///    outPickingId.g = (pickingId &gt;&gt; 8) &amp; 0xFFu;
        ///    outPickingId.b = (pickingId &gt;&gt; 16) &amp; 0xFFu;
        ///    outPickingId.a = (pickingId &gt;&gt; 24) &amp; 0xFFu;
        ///}.
        /// </summary>
        internal static string KclOctreeCubeFragment {
            get {
                return ResourceManager.GetString("KclOctreeCubeFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) in vec3 aPosition;
        ///layout (location = 1) in vec3 aMinPos;
        ///layout (location = 2) in float aSize;
        ///layout (location = 3) in uint aPickingId;
        ///
        ///out vec4 vertexColor;
        ///flat out uint pickingId;
        ///
        ///uniform mat4 model;
        ///uniform mat4 view;
        ///uniform mat4 projection;
        ///
        ///uniform uint pickingGroupId;
        ///uniform uint hoverId;
        ///
        ///uniform vec4 normalColor;
        ///uniform vec4 hoverColor;
        ///
        ///void main()
        ///{
        ///    gl_Position = projection * view * model * vec4(aMinPos + aPosition * aSize, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string KclOctreeCubeVertex {
            get {
                return ResourceManager.GetString("KclOctreeCubeVertex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///layout (location = 1) out uvec4 outPickingId;
        ///
        ///in vec4 vertexColor;
        ///flat in uint pickingId;
        ///sample in vec3 barycentric;
        ///
        ///uniform float wireframeThickness;
        ///uniform vec4 wireframeColor;
        ///
        ///
        ///float aastep (float threshold, float dist)
        ///{
        ///    float afwidth = fwidth(dist) * 0.5;
        ///    return smoothstep(threshold - afwidth, threshold + afwidth, dist);
        ///}
        ///
        ///// This function is not currently used, but it can be useful
        ///// to achieve a fixed wid [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string KclPrismFragment {
            get {
                return ResourceManager.GetString("KclPrismFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) in vec3 aPosition;
        ///layout (location = 1) in vec4 aColor;
        ///layout (location = 2) in uint aPickingId;
        ///layout (location = 3) in uint aCornerIdx;
        ///
        ///out vec4 vertexColor;
        ///sample out vec3 barycentric;
        ///flat out uint pickingId;
        ///
        ///uniform mat4 model;
        ///uniform mat4 view;
        ///uniform mat4 projection;
        ///
        ///void main()
        ///{
        ///    gl_Position = projection * view * model * vec4(aPosition, 1.0);
        ///    vertexColor = aColor;
        ///
        ///    if (aCornerIdx == 0)
        ///        barycentric = vec3(1, 0, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string KclPrismVertex {
            get {
                return ResourceManager.GetString("KclPrismVertex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///layout (location = 1) out uvec4 outPickingId;
        ///layout (location = 2) out uint outFogBit;
        ///
        ///in vec4 vertexColor; // the input variable from the vertex shader (same name and same type)
        ///flat in uint pickingId;
        ///sample in vec3 boxPos;
        ///
        ///flat in uint hover;
        ///flat in uint highlight;
        ///
        ///uniform sampler2D texture0;
        ///
        ///sample in vec2 texCoord;
        ///
        ///const float wireframeThickness = 2;
        ///
        ///void main()
        ///{
        ///    vec2 shiftTexCoord = mod(texCoord, 1.0) - vec2 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string NkmAreaFragment {
            get {
                return ResourceManager.GetString("NkmAreaFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 400 core
        ///
        ///layout (location = 0) in vec3 aPosition;
        ///layout (location = 1) in vec3 aNormalOrColor;
        ///layout (location = 2) in vec2 aTexCoord;
        ///layout (location = 3) in uint aMtxId;
        ///
        ///layout (location = 4) in mat4 aTransform;
        ///layout (location = 8) in vec3 aColor;
        ///layout (location = 9) in uint aPickingId;
        ///layout (location = 10) in uint aHasText;
        ///layout (location = 11) in uint aHover;
        ///layout (location = 12) in uint aHighlight;
        ///layout (location = 13) in float aTexCoordAngle;
        ///
        ///out vec4 vertexCo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string NkmAreaVertex {
            get {
                return ResourceManager.GetString("NkmAreaVertex", resourceCulture);
            }
        }
    }
}
