using HaroohiePals.IO.Archive;
using HaroohiePals.Nitro.NitroSystem.Fnd;
using System.Security.Cryptography;
using Xunit;

namespace HaroohiePals.Nitro.NitroSystem.Test.Fnd
{
    public class NarcTest
    {
        [Fact]
        public void ReadTest()
        {
            var narc = new Narc(TestNarc);

            Assert.Equal(1, narc.FileAllocationTable.FileCount);
            Assert.Equal(401u, narc.FileAllocationTable.Entries[0].FileSize);
            Assert.Equal(3, narc.FileNameTable.DirectoryTable.Length);

            var archive = narc.ToArchive();
            Assert.True(archive.ExistsDirectory("/Foo"));
            Assert.True(archive.ExistsDirectory("/Bar"));
            Assert.True(archive.ExistsFile("/dummy.txt"));

            var dummy = archive.GetFileData("/dummy.txt");
            Assert.Equal(401, dummy.Length);
            Assert.Equal(new byte[]
            {
                0x3B, 0xEF, 0xA4, 0x59, 0x3A, 0x66, 0xB4, 0x37, 0xB6, 0x75, 0x28, 0x8A,
                0xB6, 0x6F, 0xAB, 0xF4, 0xBD, 0x09, 0xE7, 0x49
            }, SHA1.HashData(dummy));
        }

        [Fact]
        public void ReadAfterArchiveConversionTest()
        {
            var narc = new Narc(new MemoryArchive(new Narc(TestNarc).ToArchive()));

            Assert.Equal(1, narc.FileAllocationTable.FileCount);
            Assert.Equal(401u, narc.FileAllocationTable.Entries[0].FileSize);
            Assert.Equal(3, narc.FileNameTable.DirectoryTable.Length);

            var archive = narc.ToArchive();
            Assert.True(archive.ExistsDirectory("/Foo"));
            Assert.True(archive.ExistsDirectory("/Bar"));
            Assert.True(archive.ExistsFile("/dummy.txt"));

            var dummy = archive.GetFileData("/dummy.txt");
            Assert.Equal(401, dummy.Length);
            Assert.Equal(new byte[]
            {
                0x3B, 0xEF, 0xA4, 0x59, 0x3A, 0x66, 0xB4, 0x37, 0xB6, 0x75, 0x28, 0x8A,
                0xB6, 0x6F, 0xAB, 0xF4, 0xBD, 0x09, 0xE7, 0x49
            }, SHA1.HashData(dummy));
        }

        [Fact]
        public void ReadWriteTest()
        {
            var narc   = new Narc(TestNarc);
            var result = narc.Write();
            Assert.Equal(TestNarc, result);
        }

        private static readonly byte[] TestNarc =
        {
            0x4E, 0x41, 0x52, 0x43, 0xFE, 0xFF, 0x00, 0x01, 0xFC, 0x01, 0x00, 0x00,
            0x10, 0x00, 0x03, 0x00, 0x42, 0x54, 0x41, 0x46, 0x14, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x01, 0x00, 0x00,
            0x42, 0x54, 0x4E, 0x46, 0x3C, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x03, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xF0,
            0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xF0, 0x83, 0x46, 0x6F, 0x6F,
            0x01, 0xF0, 0x83, 0x42, 0x61, 0x72, 0x02, 0xF0, 0x09, 0x64, 0x75, 0x6D,
            0x6D, 0x79, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
            0x47, 0x4D, 0x49, 0x46, 0x9C, 0x01, 0x00, 0x00, 0x41, 0x63, 0x63, 0x6F,
            0x72, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x6F, 0x20, 0x61, 0x6C, 0x6C,
            0x20, 0x6B, 0x6E, 0x6F, 0x77, 0x6E, 0x20, 0x6C, 0x61, 0x77, 0x73, 0x0D,
            0x0A, 0x6F, 0x66, 0x20, 0x61, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6F, 0x6E,
            0x2C, 0x0D, 0x0A, 0x0D, 0x0A, 0x20, 0x20, 0x0D, 0x0A, 0x74, 0x68, 0x65,
            0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x20, 0x77, 0x61, 0x79,
            0x20, 0x61, 0x20, 0x62, 0x65, 0x65, 0x0D, 0x0A, 0x73, 0x68, 0x6F, 0x75,
            0x6C, 0x64, 0x20, 0x62, 0x65, 0x20, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x74,
            0x6F, 0x20, 0x66, 0x6C, 0x79, 0x2E, 0x0D, 0x0A, 0x0D, 0x0A, 0x20, 0x20,
            0x0D, 0x0A, 0x49, 0x74, 0x73, 0x20, 0x77, 0x69, 0x6E, 0x67, 0x73, 0x20,
            0x61, 0x72, 0x65, 0x20, 0x74, 0x6F, 0x6F, 0x20, 0x73, 0x6D, 0x61, 0x6C,
            0x6C, 0x20, 0x74, 0x6F, 0x20, 0x67, 0x65, 0x74, 0x0D, 0x0A, 0x69, 0x74,
            0x73, 0x20, 0x66, 0x61, 0x74, 0x20, 0x6C, 0x69, 0x74, 0x74, 0x6C, 0x65,
            0x20, 0x62, 0x6F, 0x64, 0x79, 0x20, 0x6F, 0x66, 0x66, 0x20, 0x74, 0x68,
            0x65, 0x20, 0x67, 0x72, 0x6F, 0x75, 0x6E, 0x64, 0x2E, 0x0D, 0x0A, 0x0D,
            0x0A, 0x20, 0x20, 0x0D, 0x0A, 0x54, 0x68, 0x65, 0x20, 0x62, 0x65, 0x65,
            0x2C, 0x20, 0x6F, 0x66, 0x20, 0x63, 0x6F, 0x75, 0x72, 0x73, 0x65, 0x2C,
            0x20, 0x66, 0x6C, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6E, 0x79, 0x77, 0x61,
            0x79, 0x0D, 0x0A, 0x0D, 0x0A, 0x20, 0x20, 0x0D, 0x0A, 0x62, 0x65, 0x63,
            0x61, 0x75, 0x73, 0x65, 0x20, 0x62, 0x65, 0x65, 0x73, 0x20, 0x64, 0x6F,
            0x6E, 0x27, 0x74, 0x20, 0x63, 0x61, 0x72, 0x65, 0x0D, 0x0A, 0x77, 0x68,
            0x61, 0x74, 0x20, 0x68, 0x75, 0x6D, 0x61, 0x6E, 0x73, 0x20, 0x74, 0x68,
            0x69, 0x6E, 0x6B, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6D, 0x70, 0x6F, 0x73,
            0x73, 0x69, 0x62, 0x6C, 0x65, 0x2E, 0x0D, 0x0A, 0x0D, 0x0A, 0x20, 0x20,
            0x0D, 0x0A, 0x59, 0x65, 0x6C, 0x6C, 0x6F, 0x77, 0x2C, 0x20, 0x62, 0x6C,
            0x61, 0x63, 0x6B, 0x2E, 0x20, 0x59, 0x65, 0x6C, 0x6C, 0x6F, 0x77, 0x2C,
            0x20, 0x62, 0x6C, 0x61, 0x63, 0x6B, 0x2E, 0x0D, 0x0A, 0x59, 0x65, 0x6C,
            0x6C, 0x6F, 0x77, 0x2C, 0x20, 0x62, 0x6C, 0x61, 0x63, 0x6B, 0x2E, 0x20,
            0x59, 0x65, 0x6C, 0x6C, 0x6F, 0x77, 0x2C, 0x20, 0x62, 0x6C, 0x61, 0x63,
            0x6B, 0x2E, 0x0D, 0x0A, 0x0D, 0x0A, 0x20, 0x20, 0x0D, 0x0A, 0x4F, 0x6F,
            0x68, 0x2C, 0x20, 0x62, 0x6C, 0x61, 0x63, 0x6B, 0x20, 0x61, 0x6E, 0x64,
            0x20, 0x79, 0x65, 0x6C, 0x6C, 0x6F, 0x77, 0x21, 0x0D, 0x0A, 0x4C, 0x65,
            0x74, 0x27, 0x73, 0x20, 0x73, 0x68, 0x61, 0x6B, 0x65, 0x20, 0x69, 0x74,
            0x20, 0x75, 0x70, 0x20, 0x61, 0x20, 0x6C, 0x69, 0x74, 0x74, 0x6C, 0x65,
            0x2E, 0xFF, 0xFF, 0xFF
        };
    }
}